/*

Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.

How many such routes are there through a 20×20 grid?

Strategy: Use pascal's triangle to find the number of paths available. It is the largest number in the row that matches
40 in the second place.
*/

		import java.math.BigInteger;

public class Problem015 {

	   private static BigInteger findMax(BigInteger[] arr){
		   BigInteger max = BigInteger.valueOf(0);
		   for(BigInteger i: arr){
			   if(i.compareTo(max) > 0){
				   max = i;
			   }
		   }
		   return max;
	   }

	   public static void main(String[] args) {
		   long startTime = System.currentTimeMillis();
	       double row = 41;
		   BigInteger[] previousRow;
		   BigInteger[] currentRow = {BigInteger.valueOf(1)}; 	//start the triangle with 1
		   previousRow = currentRow;							//move row to previous and build the next row
		   for (int i = 2; i <= row; i++) {
			   currentRow = new BigInteger[i];                    //current row grows in size by 1 for each loop
			   currentRow[0] = BigInteger.valueOf(1);            //starting position value is 1
			   currentRow[i - 1] = BigInteger.valueOf(1);        //last position value is 1
			   for (int j = 0; j <= i - 3; j++) {                //fill out pascal's triangle by adding values from
				   //previous row
				   currentRow[j + 1] = previousRow[j].add(previousRow[j + 1]);
			   }
			   if (i == row) {                              	//print the largest number in the row if we are done
				   System.out.println("max is " + findMax(currentRow) +
						   " found in " + (System.currentTimeMillis() - startTime) + " ms.");
			   }
			   previousRow = currentRow;
		   }

	   }
	   
	}
	
